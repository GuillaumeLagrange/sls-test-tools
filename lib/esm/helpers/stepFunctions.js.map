{"version":3,"sources":["../../../src/helpers/stepFunctions.ts"],"names":["StepFunctions","init","stepFunctions","AWSClient","allStateMachines","listStateMachines","promise","build","stepFunction","runExecution","stateMachineName","input","undefined","Error","smList","stateMachines","filter","stateMachine","name","stateMachineArn","executionParams","JSON","stringify","execution","startExecution","listExecParams","executionList","listExecutions","executions","exec","executionArn","status","length","Promise","resolve","setTimeout","describeExecution","obtainStateMachineArn","listStateMachineParams","find","obtainExecutionArn","StateMachineArn"],"mappings":"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","sourcesContent":["import { StepFunctions as AWSStepFunctions } from \"aws-sdk\";\nimport { AWSClient } from \"./general\";\n\nexport default class StepFunctions {\n  stepFunctions: AWSStepFunctions | undefined;\n  allStateMachines: AWSStepFunctions.ListStateMachinesOutput | undefined;\n\n  async init(): Promise<void> {\n    this.stepFunctions = new AWSClient.StepFunctions();\n    this.allStateMachines = await this.stepFunctions\n      .listStateMachines()\n      .promise();\n  }\n\n  static async build(): Promise<StepFunctions> {\n    const stepFunction = new StepFunctions();\n    await stepFunction.init();\n\n    return stepFunction;\n  }\n\n  async runExecution(\n    stateMachineName: string,\n    input: unknown\n  ): Promise<AWSStepFunctions.DescribeExecutionOutput> {\n    if (this.allStateMachines === undefined) {\n      throw new Error(\n        \"The list of state machines is undefined. You might have forgotten to run build().\"\n      );\n    }\n    const smList = this.allStateMachines.stateMachines.filter(\n      (stateMachine: AWSStepFunctions.StateMachineListItem) =>\n        stateMachine.name === stateMachineName\n    );\n    const stateMachineArn = smList[0].stateMachineArn;\n    const executionParams = {\n      stateMachineArn: stateMachineArn,\n      input: JSON.stringify(input),\n    };\n    if (this.stepFunctions === undefined) {\n      throw new Error(\n        \"The Step Functions client is undefined. You might have forgotten to run build().\"\n      );\n    }\n    const execution: AWSStepFunctions.StartExecutionOutput =\n      await this.stepFunctions.startExecution(executionParams).promise();\n    const listExecParams = { stateMachineArn: stateMachineArn };\n    let executionList = await this.stepFunctions\n      .listExecutions(listExecParams)\n      .promise();\n    // Poll until the given execution is no longer running\n    while (\n      executionList.executions.filter(\n        (exec: AWSStepFunctions.ExecutionListItem) =>\n          exec.executionArn === execution.executionArn &&\n          exec.status === \"RUNNING\"\n      ).length !== 0\n    ) {\n      executionList = await this.stepFunctions\n        .listExecutions(listExecParams)\n        .promise();\n\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n    }\n\n    return await this.stepFunctions\n      .describeExecution({ executionArn: execution.executionArn })\n      .promise();\n  }\n\n  async obtainStateMachineArn(stateMachineName: string): Promise<string> {\n    const listStateMachineParams = {};\n    // Get all state machines\n    if (this.stepFunctions === undefined) {\n      throw new Error(\n        \"The Step Functions client is undefined. You might have forgotten to run build().\"\n      );\n    }\n    const allStateMachines = await this.stepFunctions\n      .listStateMachines(listStateMachineParams)\n      .promise();\n    // Find state machine with specified name and get its arn\n    const smList = allStateMachines.stateMachines.find(\n      (stateMachine: AWSStepFunctions.StateMachineListItem) =>\n        stateMachine.name === stateMachineName\n    );\n    if (smList == null) throw new Error(\"No matching state machine. \");\n\n    return smList.stateMachineArn;\n  }\n\n  async obtainExecutionArn(StateMachineArn: string): Promise<string> {\n    const listExecParams = { stateMachineArn: StateMachineArn };\n    if (this.stepFunctions == null) {\n      throw new Error(\n        \"The Step Functions client is undefined. You might have forgotten to run build().\"\n      );\n    }\n\n    // Get all executions for this stateMachine\n    const executionList = await this.stepFunctions\n      .listExecutions(listExecParams)\n      .promise();\n\n    return executionList.executions[0].executionArn;\n  }\n}\n"],"file":"stepFunctions.js"}