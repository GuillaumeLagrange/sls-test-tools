{"version":3,"sources":["../../../../src/assertions/toHaveEventWithSource/index.ts"],"names":["toHaveEventWithSource","Messages","expectedSourceName","message","parsedBody","JSON","parse","Body","source"],"mappings":";;;;;;;AAAA;;eAEe;AACbA,EAAAA,qBAAqB,CACnB;AAAEC,IAAAA;AAAF,GADmB,EAEnBC,kBAFmB,EAGD;AAClB,QAAIC,OAAJ;AAEA,UAAMC,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWL,QAAQ,CAAC,CAAD,CAAR,CAAYM,IAAvB,CAAnB;;AACA,QAAIH,UAAU,CAACI,MAAX,KAAsBN,kBAA1B,EAA8C;AAC5CC,MAAAA,OAAO,GAAI,sCAAqCD,kBAAmB,EAAnE;AAEA,aAAO,4BAAWC,OAAX,EAAoB,IAApB,CAAP;AACD;;AACDA,IAAAA,OAAO,GAAI,sBACTC,UAAU,CAACI,MAAX,IAAqB,WACtB,qCAAoCN,kBAAmB,GAFxD;AAIA,WAAO,4BAAWC,OAAX,EAAoB,KAApB,CAAP;AACD;;AAlBY,C","sourcesContent":["import { testResult, TestResultOutput } from \"utils/testResult\";\n\nexport default {\n  toHaveEventWithSource(\n    { Messages }: { Messages: [{ Body: string }] },\n    expectedSourceName: string\n  ): TestResultOutput {\n    let message;\n\n    const parsedBody = JSON.parse(Messages[0].Body) as { source?: string };\n    if (parsedBody.source === expectedSourceName) {\n      message = `expected sent event to have source ${expectedSourceName}`;\n\n      return testResult(message, true);\n    }\n    message = `sent event source \"${\n      parsedBody.source ?? \"undefined\"\n    }\" does not match expected source \"${expectedSourceName}\"`;\n\n    return testResult(message, false);\n  },\n};\n"],"file":"index.js"}